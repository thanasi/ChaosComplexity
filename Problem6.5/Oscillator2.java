/*<html>  <body>  <applet  code="Oscillator2.class",  archive="/java/jars/jcommon.jar, /java/jars/jfreechart.jar, /java/jars/P251Applet.jar",  height=770, width=920>  </applet>  </body>  </html>*///  Applet for plotting solutions to oscillator problemimport javax.swing.*;import P251.*;public class Oscillator2 extends P251Applet{    DoubleWell dw1, dw2;						//  dynamics object    VariableSet vars,vars2;					//  variables (time, x, momentum)    double[] x, x2, x1plot, x2plot, xdplot, t, t2;		//  arrays for plotting    int N;								//  number of time steps	      private inputPanel ip1, ip2;		// declare input panel objects    private graphPanel gpX, gpP;		// declare graph panel objects    public void fillPanels() {	ip1 = new inputPanel();	ip1.addField("dt",.01);	ip1.addField("A",1.);	ip1.addField("force",4.);	addPanel(ip1); // adds input panel 1 to applet			ip2 = new inputPanel();	ip2.addField("omega",Math.PI);	ip2.addField("mass",1.);	ip2.addField("damping",1.);	addPanel(ip2); // adds input panel 2 to applet			gpX = new graphPanel(900,300,false);	gpX.setXLabel("t");	gpX.setYLabel("x");	gpX.setTitle("Position Evolution");	gpX.setDotSize(2);	addPanel(gpX); // adds graph panel to applet			gpP = new graphPanel(900,300,false);	gpP.setXLabel("t");	gpP.setYLabel("x2-x1");	gpP.setTitle("position differences");	gpP.setDotSize(2);	addPanel(gpP); // adds graph panel to applet    }   //end of fillPanels	    public void initValues() {    	dw1 = new DoubleWell();         //  initialize object	dw1.setdt(.01);                 //  initialize DoubleWell parameters	dw1.setA(1.);                   	dw1.setforce(4.);           	dw1.setomega(Math.PI);          	dw1.setmass(1.);                	dw1.setdamping(1.); 	// dw2 differes from dw1 only in that dt for dw2 is twice as large	dw2 = new DoubleWell();         //  initialize object	dw2.setdt(.02);                 //  initialize DoubleWell parameters	dw2.setA(1.);                   	dw2.setforce(4.);           	dw2.setomega(Math.PI);          	dw2.setmass(1.);                	dw2.setdamping(1.); 	//initialize input field values to match the parameters above	ip1.setValue(0, dw1.getdt()); //"dt"	ip1.setValue(1, dw1.getA()); //"A"	ip1.setValue(2, dw1.getforce());  //"force"	ip2.setValue(0, dw1.getomega()); //"omega"	ip2.setValue(1, dw1.getmass()); //"mass"	ip2.setValue(2, dw1.getdamping()); //"damping"	N = 9999;                       //  Number of Time Steps so that tmax < 100				x1plot = new double[N+1];        //  array of positions	x2plot = new double[N+1];	xdplot = new double[N+1];        //  array of difference	t = new double[N+1];            //  array of times	t2 = new double[N+1];				t[0] = 0.0;                     //  initial time        	t2[0] = 0.0;	x1plot[0] = -1.2;                //  initial x	x2plot[0] = -1.2;	xdplot[0] = 0.0;                 			x = new double[2];              //  pair x and p	x2 = new double[2];	x[0] = x1plot[0];                //  initial x	x2[0] = x2plot[0];	x[1] = 0.0;                	x2[1] = 0.0;	vars = new VariableSet(0.0,x);  //  set initial variables	vars2 = new VariableSet(0.0, x2);	dw1.setvars(vars);		dw2.setvars(vars2);    }   //end of initValues	    public void compute () {	int i;	readValues();	for (i=1; i<=N; i++) {			//  loop to compute solution	    vars = dw1.nextvars();      //  advance in time 1 step	    dw1.setvars(vars);          //  bring old variables up to date	    x = vars.getx();            //  extract x and p	    t[i] = vars.gettime();      //  extract and store t for plotting	    x1plot[i] = x[0];            //  store x for plotting	    if (i%2==0) {               // since dw2 is moving twice as fast, only update it every other step		vars2 = dw2.nextvars();		dw2.setvars(vars2);		x2 = vars2.getx();		t2[i] = vars2.gettime();		x2plot[i] = x2[0];           	    }	    else {		t2[i] = t2[i-1];		x2plot[i] = x2plot[i-1];	    }	    xdplot[i] = x2[0] - x[0];	} //end of i loop: now trajectories have been calculated				gpX.addData(t,x1plot,"x1");	gpX.addData(t2,x2plot,"x2");	gpP.addData(t,xdplot,"diff");	t[0] = t[N];                     //  setup t for next round        	x1plot[0] = x1plot[N];             //  setup x for next round 			x2plot[0] = x2plot[N];	xdplot[0] = xdplot[N];    }    public void readValues()    {	dw1.setdt(ip1.getValue(0)); // input panel 1	dw1.setA(ip1.getValue(1));	dw1.setforce(ip1.getValue(2));			dw1.setomega(ip2.getValue(0)); // input panel 2	dw1.setmass(ip2.getValue(1));              	dw1.setdamping(ip2.getValue(2));	dw2.setdt(ip1.getValue(0)*2); // input panel 1	dw2.setA(ip1.getValue(1));	dw2.setforce(ip1.getValue(2));			dw2.setomega(ip2.getValue(0)); // input panel 2	dw2.setmass(ip2.getValue(1));              	dw2.setdamping(ip2.getValue(2));    }}       //end of Oscillator                 